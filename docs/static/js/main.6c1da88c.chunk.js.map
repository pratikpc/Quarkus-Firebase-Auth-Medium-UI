{"version":3,"sources":["components/Utils/AuthCheck.js","components/Landing.js","components/Login.js","App.js","serviceWorker.js","firebase.config.js","index.js"],"names":["ShowIfAuth","props","User","children","firebase","auth","currentUser","Token","a","getIdToken","ShowIfNoAuth","SignOut","signOut","FetchNote","token","console","log","fetch","process","method","mode","withCredentials","credentials","headers","noteResp","ok","Error","status","text","note","setNote","setLoading","length","substring","body","URLSearchParams","error","Landing","React","useState","loading","useEffect","PerformAsync","style","justifyContent","textAlign","width","margin","rows","cols","value","placeholder","onChange","event","target","onClick","_","UploadNote","window","location","reload","class","href","uiConfig","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","Login","className","paddingTop","src","alt","padding","color","fontSize","display","height","firebaseAuth","App","isLocalhost","Boolean","hostname","match","register","config","navigator","URL","origin","addEventListener","swUrl","then","response","contentType","get","indexOf","serviceWorker","ready","registration","unregister","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","user","initializeApp","FirebaseConfig","FirebaseSetup","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c1da88c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport function ShowIfAuth(props) {\r\n    if (User() != null)\r\n        return <>{props.children}</>;\r\n    else\r\n        return <></>;\r\n}\r\nexport function User(){\r\n    return firebase.auth().currentUser;\r\n}\r\nexport async function Token(){\r\n    return await User().getIdToken();\r\n}\r\nexport function ShowIfNoAuth(props) {\r\n    if (User() == null)\r\n        return <>{props.children}</>;\r\n    else\r\n        return <></>;\r\n}\r\nexport async function SignOut(){\r\n    return firebase.auth().signOut();\r\n}\r\n\r\n","import React from 'react'\r\nimport { Token, SignOut } from './Utils/AuthCheck';\r\nimport './Landing.css';\r\nasync function FetchNote() {\r\n    const token = await Token();\r\n    console.log(token);\r\n    const noteResp = await fetch(`${process.env.REACT_APP_SERVER}/api/note`, {\r\n        method: \"GET\",\r\n        mode: \"cors\",\r\n        withCredentials: true,\r\n        credentials: 'include',\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    });\r\n    if (!noteResp.ok) {\r\n        throw new Error(\"Status \" + noteResp.status + await noteResp.text());\r\n    }\r\n    return await noteResp.text();\r\n}\r\n\r\nasync function UploadNote(note, setNote, setLoading) {\r\n    try {\r\n        if(note.length > 19){\r\n            note = note.substring(0, 19);\r\n            setNote(note);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        const token = await Token();\r\n        const body = new URLSearchParams({\r\n            note: note\r\n        });\r\n\r\n        const noteResp = await fetch(`${process.env.REACT_APP_SERVER}/api/note`, {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            body: body,\r\n            withCredentials: true,\r\n            credentials: 'include',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n            }\r\n        });\r\n        if (!noteResp.ok) {\r\n            throw new Error(\"Status \" + noteResp.status + await noteResp.text());\r\n        }\r\n        setNote(await FetchNote());\r\n    } catch (err) {\r\n        console.error(err);\r\n    } finally {\r\n        setLoading(false);\r\n    }\r\n}\r\n\r\nexport default function Landing() {\r\n    const [note, setNote] = React.useState(\"\");\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        async function PerformAsync() {\r\n            try {\r\n                setLoading(true);\r\n                const note = await FetchNote();\r\n                setNote(note);\r\n            } catch (err) {\r\n                console.error(err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        PerformAsync();\r\n    }, []);\r\n    return <>\r\n        <div style={{\r\n            justifyContent: \"center\",\r\n            textAlign: \"center\",\r\n            width: \"50%\",\r\n            margin: \"0 auto\"\r\n        }}>\r\n            <h1>Save A Single Note</h1>\r\n            <br />\r\n            <div>\r\n                <textarea\r\n                    rows={5}\r\n                    cols={50}\r\n                    value={note}\r\n                    placeholder=\"Store Notes\"\r\n                    onChange={event => setNote(event.target.value)} />\r\n                <br />\r\n                <div >\r\n                    <button onClick={_ => UploadNote(note, setNote, setLoading)}>\r\n                        UPDATE\r\n                    </button>\r\n                    <button onClick={async _ => {\r\n                        await SignOut();\r\n                        window.location.reload();\r\n                    }}>LOGOUT</button>\r\n                </div>\r\n                {\r\n                    loading &&\r\n                    <p class=\"loading\">\r\n                        Loading...\r\n                    </p>\r\n                }\r\n            </div>\r\n            <p>\r\n                <a href=\"https://medium.com/@pratikpc/user-auth-using-quarkus-firebase-fdab11d5a845\">Medium Article Link</a>\r\n            </p>\r\n        </div>\r\n    </>;\r\n};\r\n\r\n","import React from 'react'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\n\r\n// eslint-disable-next-line\r\nimport * as firebaseui from 'firebaseui';\r\n\r\n\r\n\r\n// Configure FirebaseUI.\r\nconst uiConfig = {\r\n    signInFlow: 'redirect',\r\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\r\n    signInSuccessUrl: `${process.env.PUBLIC_URL}/`,\r\n    // We will display Google and Facebook as auth providers.\r\n    signInOptions: [\r\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n    ]//,\r\n    // tosUrl: '<your-tos-url>',\r\n    // Privacy policy url/callback.\r\n    // privacyPolicyUrl: ''\r\n};\r\n\r\nexport default function Login() {\r\n    return (\r\n        <div className=\"center\" style={{ textAlign: \"center\", paddingTop: \"100px\" }}>\r\n            <img src={`${process.env.PUBLIC_URL}/logo192.png`} alt=\"Logo\" />\r\n            <div className=\"center\" style={{ textAlign: \"center\", padding: \"30px\", color: \"#808080\", fontSize: \"20px\" }}>\r\n                <p>Sample Quarkus Firebase Auth App. Store Notes for a given user</p>\r\n                <p>\r\n                    <a href=\"https://medium.com/@pratikpc/user-auth-using-quarkus-firebase-fdab11d5a845\">Medium Article Link</a>\r\n                </p>\r\n\r\n            </div>\r\n            <div style={{ display: \"inline-block\", height: \"50%\", width: \"70%\" }}>\r\n                <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} style={{}} />\r\n            </div>\r\n        </div>\r\n    );\r\n}   ","import React from 'react';\r\nimport Landing from './components/Landing';\r\nimport { ShowIfAuth, ShowIfNoAuth } from './components/Utils/AuthCheck';\r\nimport Login from './components/Login';\r\n\r\n\r\nconst App = () => {\r\n  return <>\r\n      <ShowIfAuth>\r\n        <Landing/>\r\n      </ShowIfAuth>\r\n      <ShowIfNoAuth>\r\n        <Login />\r\n      </ShowIfNoAuth>\r\n  </>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// This given key is public\r\n// https://stackoverflow.com/questions/37482366/is-it-safe-to-expose-firebase-apikey-to-the-public\r\n// In order to secure it, please refer to\r\n// https://stackoverflow.com/questions/35418143/how-to-restrict-firebase-data-modification\r\n\r\nexport const firebaseConfig =\r\n{\r\n  apiKey: \"AIzaSyBDwp1H3BpLuWegV1drR6_e0r6TpQwOQsA\",\r\n  authDomain: \"pc-firebase-auth-medium.firebaseapp.com\",\r\n  databaseURL: \"https://pc-firebase-auth-medium.firebaseio.com\",\r\n  projectId: \"pc-firebase-auth-medium\",\r\n  storageBucket: \"pc-firebase-auth-medium.appspot.com\",\r\n  messagingSenderId: \"531097980673\",\r\n  appId: \"1:531097980673:web:467769a56adfcefac29500\"\r\n};\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport firebase from \"firebase/app\";\r\nimport { firebaseConfig as FirebaseConfig } from \"./firebase.config\";\r\n\r\nasync function FirebaseSetup() {\r\n        // Wait till Firebase Load Complete before Firing\r\n        function getCurrentUser(auth) {\r\n                return new Promise((resolve, reject) => {\r\n                        const unsubscribe = auth.onAuthStateChanged(user => {\r\n                                unsubscribe();\r\n                                resolve(user);\r\n                        }, reject);\r\n                });\r\n        }\r\n        // If you want your app to work offline and load faster, you can change\r\n        // unregister() to register() below. Note this comes with some pitfalls.\r\n        // Learn more about service workers: https://bit.ly/CRA-PWA\r\n        serviceWorker.register();\r\n\r\n        firebase.initializeApp(FirebaseConfig);\r\n        await getCurrentUser(firebase.auth());\r\n        const user = firebase.auth().currentUser;\r\n        // No One Is Signed In\r\n        if (user == null)\r\n                return;\r\n}\r\n\r\nFirebaseSetup().then(async () => {\r\n        ReactDOM.render(<App />, document.getElementById('root'));\r\n})\r\n"],"sourceRoot":""}